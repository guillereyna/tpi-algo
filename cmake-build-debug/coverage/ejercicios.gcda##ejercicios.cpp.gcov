        -:    0:Source:/cygdrive/d/Universidad/Algoritmos y Estructuras de Datos I/TPI/TPI-template/TPI-toroide/ejercicios.cpp
        -:    0:Graph:/cygdrive/d/Universidad/Algoritmos y Estructuras de Datos I/TPI/TPI-template/TPI-toroide/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/ejercicios.gcno
        -:    0:Data:/cygdrive/d/Universidad/Algoritmos y Estructuras de Datos I/TPI/TPI-template/TPI-toroide/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/ejercicios.gcda
        -:    0:Runs:1
        -:    1:#include <algorithm>
        -:    2:#include "ejercicios.h"
        -:    3:
        -:    4:// EJERCICIO 1
        3:    5:bool toroideValido(vector<vector<bool>> const &t) {
        3:    6:    bool resp = true;
        3:    7:    int filas = t.size();
        3:    7-block  0
        3:    8:    int columnas = t[0].size();
        3:    9:    if (filas < 3 || columnas < 3) resp = false;
        2:    9-block  0
        2:    9-block  1
        9:   10:    for (int i = 0; i < filas - 1; ++i) {
        3:   10-block  0
        9:   10-block  1
        6:   11:        resp = resp && (t[i].size() == t[i+1].size());
        6:   11-block  0
        2:   11-block  1
        2:   11-block  2
        4:   11-block  3
        6:   11-block  4
        -:   12:    }
        3:   13:    return resp;
        3:   13-block  0
        -:   14:}
        -:   15:
        -:   16:// EJERCICIO 2
        5:   17:bool toroideMuerto(toroide const &t) {
        5:   18:    bool resp = true;
        5:   19:    int filas = t.size();
        5:   19-block  0
        5:   20:    int columnas = t[0].size();
       31:   21:    for (int i = 0; i < filas; ++i) {
       31:   21-block  0
       26:   21-block  1
      144:   22:        for (int j = 0; j < columnas; ++j) {
       26:   22-block  0
      144:   22-block  1
      118:   22-block  2
      118:   23:            if (t[i][j]) resp = false;
      118:   23-block  0
       18:   23-block  1
        -:   24:        }
        -:   25:    }
        5:   26:    return resp;
        5:   26-block  0
        -:   27:}
        -:   28:
        -:   29:// EJERCICIO 3
        1:   30:vector<posicion> posicionesVivas(toroide const &t) {
        1:   31:    vector<posicion> vivos;
        1:   31-block  0
        1:   32:    posicion pos;
        1:   33:    int filas = t.size();
        1:   34:    int columnas = t[0].size();
        7:   35:    for (int i = 0; i < filas; ++i) {
        7:   35-block  0
        6:   35-block  1
       24:   36:        for (int j = 0; j < columnas; ++j) {
        6:   36-block  0
       24:   36-block  1
       18:   36-block  2
       18:   37:            if (t[i][j]){
       18:   37-block  0
        6:   38:                pos = std::make_pair(i,j);
        6:   38-block  0
        6:   38-block  1
        6:   39:                vivos.push_back(pos);
        -:   40:            }
        -:   41:        }
        -:   42:    }
        2:   43:    return vivos;
        1:   43-block  0
        1:   43-block  1
        -:   44:}
        -:   45:
        -:   46:// EJERCICIO 4
        1:   47:float densidadPoblacion(toroide const &t) {
        1:   48:    float resp = cantidadVivas(t)/(t.size()*t[0].size());
        1:   48-block  0
        1:   49:    return resp;
        -:   50:}
        -:   51:
        -:   52:// EJERCICIO 5
      199:   53:int cantidadVecinosVivos(toroide const &t, int f, int c) {
      199:   54:    int resp = 0;
      199:   55:    int filas = t.size();
      199:   55-block  0
      199:   56:    int columnas = t[0].size();
     1117:   57:    for (int i = 0; i < filas; ++i) {
     1117:   57-block  0
      918:   57-block  1
     4676:   58:        for (int j = 0; j < columnas; ++j) {
      918:   58-block  0
     4676:   58-block  1
     3758:   58-block  2
     3758:   59:            if (t[i][j] && sonVecinos(i,j,f,c,t)) resp++;
     3758:   59-block  0
      506:   59-block  1
      269:   59-block  2
     3489:   59-block  3
     3758:   59-block  4
      269:   59-block  5
        -:   60:        }
        -:   61:    }
      199:   62:    return resp;
      199:   62-block  0
        -:   63:}
        -:   64:
        -:   65:// EJERCICIO 6
      198:   66:bool evolucionDePosicion(toroide const &t, posicion x) {
      198:   67:	bool resp = false;
      198:   68:    int i = x.first;
      198:   69:    int j = x.second;
      198:   70:    int vecinosVivos = cantidadVecinosVivos(t,i,j);
      198:   70-block  0
      198:   71:    if (t[i][j]){
       33:   72:        resp = vecinosVivos >= 2 && vecinosVivos <= 3;
       33:   72-block  0
       23:   72-block  1
       14:   72-block  2
       19:   72-block  3
       33:   72-block  4
        -:   73:    } else {
      165:   74:        resp = vecinosVivos == 3;
      165:   74-block  0
        -:   75:    }
      198:   76:    return resp;
      198:   76-block  0
        -:   77:}
        -:   78:
        -:   79:// EJERCICIO 7
       12:   80:void evolucionToroide(toroide &t){
       24:   81:    toroide t0 = t;
       12:   81-block  0
       12:   81-block  1
    $$$$$:   81-block  2
       12:   82:    int filas = t.size();
       12:   82-block  0
       12:   83:    int columnas = t[0].size();
       12:   84:    posicion pos;
       64:   85:    for (int i = 0; i < filas; ++i) {
       64:   85-block  0
       52:   85-block  1
      248:   86:        for (int j = 0; j < columnas; ++j) {
       52:   86-block  0
      248:   86-block  1
      196:   87:            pos = {i,j};
      196:   87-block  0
      196:   88:            t[i][j] = evolucionDePosicion(t0,pos);
      196:   88-block  0
        -:   89:        }
        -:   90:    }
       12:   91:}
        -:   92:
        -:   93:// EJERCICIO 8
        1:   94:toroide evolucionMultiple(toroide const &t, int K) {
        1:   95:    toroide out = t;
        1:   95-block  0
        2:   96:    for (int i = 0; i < K; ++i) {
        2:   96-block  0
        1:   96-block  1
        1:   97:        evolucionToroide(out);
        1:   97-block  0
        -:   98:    }
        1:   99:    return out;
        1:   99-block  0
        1:   99-block  1
        -:  100:}
        -:  101:
        -:  102:// EJERCICIO 9
        1:  103:bool esPeriodico(toroide const &t, int &p) {
        1:  104:    bool resp = false;
        1:  105:    int p0 = p;
        1:  106:    resp = esEvolucionDe(t,t,p);
        1:  106-block  0
       1*:  107:    if (resp == false) p = p0;
    %%%%%:  107-block  0
        1:  108:    return resp;
        1:  108-block  0
        -:  109:}
        -:  110:
        -:  111:// EJERCICIO 10
        2:  112:bool primosLejanos(toroide const &t, toroide const &u) {
        2:  113:	bool resp = false;
        -:  114:    int p;
       2*:  115:    resp = esEvolucionDe(t,u,p) || esEvolucionDe(u,t,p);
        2:  115-block  0
        2:  115-block  1
    %%%%%:  115-block  2
    %%%%%:  115-block  3
        2:  115-block  4
    %%%%%:  115-block  5
        2:  116:    return resp;
        2:  116-block  0
        2:  116-block  1
        -:  117:}
        -:  118:
        -:  119:// EJERCICIO 11
        1:  120:int seleccionNatural(vector <toroide> ts) {
        -:  121:    int resp;
        1:  122:    vector<toroide> ts0;
        1:  122-block  0
    $$$$$:  122-block  1
        3:  123:    while (cantidadDeToroidesVivos(ts)>0){
        3:  123-block  0
        3:  123-block  1
        3:  123-block  2
        2:  123-block  3
    $$$$$:  123-block  4
    $$$$$:  123-block  5
        2:  124:        ts0 = ts;
        2:  124-block  0
        8:  125:        for (int i = 0; i < ts.size(); ++i) {
        2:  125-block  0
        8:  125-block  1
        6:  125-block  2
        6:  126:            evolucionToroide(ts[i]);
        6:  126-block  0
        -:  127:        }
        -:  128:    }
        1:  129:    resp = posicionDelPrimerToroideVivo(ts0);
        1:  129-block  0
        1:  129-block  1
        1:  129-block  2
    $$$$$:  129-block  3
    $$$$$:  129-block  4
        2:  130:    return resp;
        1:  130-block  0
        -:  131:}
        -:  132:
        -:  133:
        -:  134:// EJERCICIO 12
        1:  135:toroide fusionar(toroide const &t, toroide const &u) {
        2:  136:    toroide out(t.size(),vector<bool>(t[0].size(), false));
        1:  136-block  0
        1:  136-block  1
    $$$$$:  136-block  2
    $$$$$:  136-block  3
        1:  137:    int filas = t.size();
        1:  138:    int columnas = t[0].size();
        -:  139:
        4:  140:    for (int i = 0; i < filas; ++i) {
        4:  140-block  0
        3:  140-block  1
       12:  141:        for (int j = 0; j < columnas; ++j) {
        3:  141-block  0
       12:  141-block  1
       9*:  142:            out[i][j] = t[i][j] && u[i][j];
        9:  142-block  0
        3:  142-block  1
    %%%%%:  142-block  2
        9:  142-block  3
        9:  142-block  4
        -:  143:        }
        -:  144:    }
        -:  145:
        1:  146:    return out;
        1:  146-block  0
        1:  146-block  1
        -:  147:}
        -:  148:
        -:  149:// EJERCICIO 13
        2:  150:bool vistaTrasladada(toroide const &t, toroide const &u){
        2:  151:	bool resp = false;
        2:  152:	int filas = t.size();
        2:  152-block  0
        2:  153:	int columnas = t[0].size();
        8:  154:    for (int i = 0; i < filas; ++i) {
        8:  154-block  0
        6:  154-block  1
       24:  155:        for (int j = 0; j < columnas; ++j) {
        6:  155-block  0
       24:  155-block  1
       18:  156:            toroide traslacion = traslacionPorXY(u,i,j);
       18:  156-block  0
    $$$$$:  156-block  1
       18:  157:            resp = resp || (traslacion == t);
       18:  157-block  0
       12:  157-block  1
       12:  157-block  2
        7:  157-block  3
       11:  157-block  4
       18:  157-block  5
        -:  158:        }
        -:  159:    }
        2:  160:    return resp;
        2:  160-block  0
        2:  160-block  1
        -:  161:}
        -:  162:
        -:  163:// EJERCICIO 14
        1:  164:int menorSuperficieViva(toroide const &t){
        1:  165:	int resp = menorRectanguloValido(t);
        1:  165-block  0
        1:  166:	int filas = t.size();
        1:  166-block  0
        1:  167:	int columnas = t[0].size();
        2:  168:	toroide traslacion(filas,vector<bool>(columnas,false));
        1:  168-block  0
    $$$$$:  168-block  1
    $$$$$:  168-block  2
    $$$$$:  168-block  3
        5:  169:    for (int i = 0; i < filas; ++i) {
        5:  169-block  0
        4:  169-block  1
       20:  170:        for (int j = 0; j < columnas; ++j) {
        4:  170-block  0
       20:  170-block  1
       16:  170-block  2
       16:  171:            traslacion = traslacionPorXY(t,i,j);
       16:  171-block  0
       16:  171-block  1
       16:  172:            int menorSuperficie = menorRectanguloValido(traslacion);
       16:  173:            if (menorSuperficie < resp) resp = menorSuperficie;
       16:  173-block  0
        3:  173-block  1
        -:  174:        }
        -:  175:    }
        2:  176:	return resp;
        1:  176-block  0
        1:  176-block  1
        -:  177:}
